<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        kiRJklR3/weDKxMtfh3wzAAAAABJRU5ErkJggg==
</value>
  </data>
</root>